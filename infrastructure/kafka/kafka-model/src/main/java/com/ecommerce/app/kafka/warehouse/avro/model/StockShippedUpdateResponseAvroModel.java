/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ecommerce.app.kafka.warehouse.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockShippedUpdateResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9198534471816301856L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockShippedUpdateResponseAvroModel\",\"namespace\":\"com.ecommerce.app.kafka.warehouse.avro.model\",\"fields\":[{\"name\":\"stockItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StockItemShipped\",\"fields\":[{\"name\":\"stockId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantity\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<StockShippedUpdateResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockShippedUpdateResponseAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockShippedUpdateResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockShippedUpdateResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockShippedUpdateResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockShippedUpdateResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockShippedUpdateResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockShippedUpdateResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockShippedUpdateResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> stockItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockShippedUpdateResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param stockItems The new value for stockItems
   */
  public StockShippedUpdateResponseAvroModel(java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> stockItems) {
    this.stockItems = stockItems;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stockItems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stockItems = (java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stockItems' field.
   * @return The value of the 'stockItems' field.
   */
  public java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> getStockItems() {
    return stockItems;
  }


  /**
   * Sets the value of the 'stockItems' field.
   * @param value the value to set.
   */
  public void setStockItems(java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> value) {
    this.stockItems = value;
  }

  /**
   * Creates a new StockShippedUpdateResponseAvroModel RecordBuilder.
   * @return A new StockShippedUpdateResponseAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder newBuilder() {
    return new com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder();
  }

  /**
   * Creates a new StockShippedUpdateResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockShippedUpdateResponseAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder newBuilder(com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder other) {
    if (other == null) {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder();
    } else {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new StockShippedUpdateResponseAvroModel RecordBuilder by copying an existing StockShippedUpdateResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new StockShippedUpdateResponseAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder newBuilder(com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel other) {
    if (other == null) {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder();
    } else {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockShippedUpdateResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockShippedUpdateResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<StockShippedUpdateResponseAvroModel> {

    private java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> stockItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stockItems)) {
        this.stockItems = data().deepCopy(fields()[0].schema(), other.stockItems);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing StockShippedUpdateResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stockItems)) {
        this.stockItems = data().deepCopy(fields()[0].schema(), other.stockItems);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'stockItems' field.
      * @return The value.
      */
    public java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> getStockItems() {
      return stockItems;
    }


    /**
      * Sets the value of the 'stockItems' field.
      * @param value The value of 'stockItems'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder setStockItems(java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped> value) {
      validate(fields()[0], value);
      this.stockItems = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stockItems' field has been set.
      * @return True if the 'stockItems' field has been set, false otherwise.
      */
    public boolean hasStockItems() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stockItems' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockShippedUpdateResponseAvroModel.Builder clearStockItems() {
      stockItems = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockShippedUpdateResponseAvroModel build() {
      try {
        StockShippedUpdateResponseAvroModel record = new StockShippedUpdateResponseAvroModel();
        record.stockItems = fieldSetFlags()[0] ? this.stockItems : (java.util.List<com.ecommerce.app.kafka.warehouse.avro.model.StockItemShipped>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockShippedUpdateResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockShippedUpdateResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockShippedUpdateResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<StockShippedUpdateResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










