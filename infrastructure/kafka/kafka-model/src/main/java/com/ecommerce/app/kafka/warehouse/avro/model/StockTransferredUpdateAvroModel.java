/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ecommerce.app.kafka.warehouse.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockTransferredUpdateAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4643689848823774752L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTransferredUpdateAvroModel\",\"namespace\":\"com.ecommerce.app.kafka.warehouse.avro.model\",\"fields\":[{\"name\":\"stockIdWarehouseFrom\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantityUpdatedFromWarehouse\",\"type\":\"int\"},{\"name\":\"stockIdWarehouseTo\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantityUpdatedToWarehouse\",\"type\":\"int\"},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StockTransferredUpdateAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTransferredUpdateAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTransferredUpdateAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTransferredUpdateAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTransferredUpdateAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTransferredUpdateAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTransferredUpdateAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTransferredUpdateAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTransferredUpdateAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID stockIdWarehouseFrom;
  private int quantityUpdatedFromWarehouse;
  private java.util.UUID stockIdWarehouseTo;
  private int quantityUpdatedToWarehouse;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTransferredUpdateAvroModel() {}

  /**
   * All-args constructor.
   * @param stockIdWarehouseFrom The new value for stockIdWarehouseFrom
   * @param quantityUpdatedFromWarehouse The new value for quantityUpdatedFromWarehouse
   * @param stockIdWarehouseTo The new value for stockIdWarehouseTo
   * @param quantityUpdatedToWarehouse The new value for quantityUpdatedToWarehouse
   * @param updatedAt The new value for updatedAt
   */
  public StockTransferredUpdateAvroModel(java.util.UUID stockIdWarehouseFrom, java.lang.Integer quantityUpdatedFromWarehouse, java.util.UUID stockIdWarehouseTo, java.lang.Integer quantityUpdatedToWarehouse, java.time.Instant updatedAt) {
    this.stockIdWarehouseFrom = stockIdWarehouseFrom;
    this.quantityUpdatedFromWarehouse = quantityUpdatedFromWarehouse;
    this.stockIdWarehouseTo = stockIdWarehouseTo;
    this.quantityUpdatedToWarehouse = quantityUpdatedToWarehouse;
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stockIdWarehouseFrom;
    case 1: return quantityUpdatedFromWarehouse;
    case 2: return stockIdWarehouseTo;
    case 3: return quantityUpdatedToWarehouse;
    case 4: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stockIdWarehouseFrom = (java.util.UUID)value$; break;
    case 1: quantityUpdatedFromWarehouse = (java.lang.Integer)value$; break;
    case 2: stockIdWarehouseTo = (java.util.UUID)value$; break;
    case 3: quantityUpdatedToWarehouse = (java.lang.Integer)value$; break;
    case 4: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stockIdWarehouseFrom' field.
   * @return The value of the 'stockIdWarehouseFrom' field.
   */
  public java.util.UUID getStockIdWarehouseFrom() {
    return stockIdWarehouseFrom;
  }


  /**
   * Sets the value of the 'stockIdWarehouseFrom' field.
   * @param value the value to set.
   */
  public void setStockIdWarehouseFrom(java.util.UUID value) {
    this.stockIdWarehouseFrom = value;
  }

  /**
   * Gets the value of the 'quantityUpdatedFromWarehouse' field.
   * @return The value of the 'quantityUpdatedFromWarehouse' field.
   */
  public int getQuantityUpdatedFromWarehouse() {
    return quantityUpdatedFromWarehouse;
  }


  /**
   * Sets the value of the 'quantityUpdatedFromWarehouse' field.
   * @param value the value to set.
   */
  public void setQuantityUpdatedFromWarehouse(int value) {
    this.quantityUpdatedFromWarehouse = value;
  }

  /**
   * Gets the value of the 'stockIdWarehouseTo' field.
   * @return The value of the 'stockIdWarehouseTo' field.
   */
  public java.util.UUID getStockIdWarehouseTo() {
    return stockIdWarehouseTo;
  }


  /**
   * Sets the value of the 'stockIdWarehouseTo' field.
   * @param value the value to set.
   */
  public void setStockIdWarehouseTo(java.util.UUID value) {
    this.stockIdWarehouseTo = value;
  }

  /**
   * Gets the value of the 'quantityUpdatedToWarehouse' field.
   * @return The value of the 'quantityUpdatedToWarehouse' field.
   */
  public int getQuantityUpdatedToWarehouse() {
    return quantityUpdatedToWarehouse;
  }


  /**
   * Sets the value of the 'quantityUpdatedToWarehouse' field.
   * @param value the value to set.
   */
  public void setQuantityUpdatedToWarehouse(int value) {
    this.quantityUpdatedToWarehouse = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.time.Instant value) {
    this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new StockTransferredUpdateAvroModel RecordBuilder.
   * @return A new StockTransferredUpdateAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder newBuilder() {
    return new com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder();
  }

  /**
   * Creates a new StockTransferredUpdateAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTransferredUpdateAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder newBuilder(com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder other) {
    if (other == null) {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder();
    } else {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new StockTransferredUpdateAvroModel RecordBuilder by copying an existing StockTransferredUpdateAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new StockTransferredUpdateAvroModel RecordBuilder
   */
  public static com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder newBuilder(com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel other) {
    if (other == null) {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder();
    } else {
      return new com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTransferredUpdateAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTransferredUpdateAvroModel>
    implements org.apache.avro.data.RecordBuilder<StockTransferredUpdateAvroModel> {

    private java.util.UUID stockIdWarehouseFrom;
    private int quantityUpdatedFromWarehouse;
    private java.util.UUID stockIdWarehouseTo;
    private int quantityUpdatedToWarehouse;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stockIdWarehouseFrom)) {
        this.stockIdWarehouseFrom = data().deepCopy(fields()[0].schema(), other.stockIdWarehouseFrom);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.quantityUpdatedFromWarehouse)) {
        this.quantityUpdatedFromWarehouse = data().deepCopy(fields()[1].schema(), other.quantityUpdatedFromWarehouse);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.stockIdWarehouseTo)) {
        this.stockIdWarehouseTo = data().deepCopy(fields()[2].schema(), other.stockIdWarehouseTo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantityUpdatedToWarehouse)) {
        this.quantityUpdatedToWarehouse = data().deepCopy(fields()[3].schema(), other.quantityUpdatedToWarehouse);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[4].schema(), other.updatedAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTransferredUpdateAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stockIdWarehouseFrom)) {
        this.stockIdWarehouseFrom = data().deepCopy(fields()[0].schema(), other.stockIdWarehouseFrom);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityUpdatedFromWarehouse)) {
        this.quantityUpdatedFromWarehouse = data().deepCopy(fields()[1].schema(), other.quantityUpdatedFromWarehouse);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stockIdWarehouseTo)) {
        this.stockIdWarehouseTo = data().deepCopy(fields()[2].schema(), other.stockIdWarehouseTo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantityUpdatedToWarehouse)) {
        this.quantityUpdatedToWarehouse = data().deepCopy(fields()[3].schema(), other.quantityUpdatedToWarehouse);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[4].schema(), other.updatedAt);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'stockIdWarehouseFrom' field.
      * @return The value.
      */
    public java.util.UUID getStockIdWarehouseFrom() {
      return stockIdWarehouseFrom;
    }


    /**
      * Sets the value of the 'stockIdWarehouseFrom' field.
      * @param value The value of 'stockIdWarehouseFrom'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder setStockIdWarehouseFrom(java.util.UUID value) {
      validate(fields()[0], value);
      this.stockIdWarehouseFrom = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stockIdWarehouseFrom' field has been set.
      * @return True if the 'stockIdWarehouseFrom' field has been set, false otherwise.
      */
    public boolean hasStockIdWarehouseFrom() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stockIdWarehouseFrom' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder clearStockIdWarehouseFrom() {
      stockIdWarehouseFrom = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityUpdatedFromWarehouse' field.
      * @return The value.
      */
    public int getQuantityUpdatedFromWarehouse() {
      return quantityUpdatedFromWarehouse;
    }


    /**
      * Sets the value of the 'quantityUpdatedFromWarehouse' field.
      * @param value The value of 'quantityUpdatedFromWarehouse'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder setQuantityUpdatedFromWarehouse(int value) {
      validate(fields()[1], value);
      this.quantityUpdatedFromWarehouse = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityUpdatedFromWarehouse' field has been set.
      * @return True if the 'quantityUpdatedFromWarehouse' field has been set, false otherwise.
      */
    public boolean hasQuantityUpdatedFromWarehouse() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantityUpdatedFromWarehouse' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder clearQuantityUpdatedFromWarehouse() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stockIdWarehouseTo' field.
      * @return The value.
      */
    public java.util.UUID getStockIdWarehouseTo() {
      return stockIdWarehouseTo;
    }


    /**
      * Sets the value of the 'stockIdWarehouseTo' field.
      * @param value The value of 'stockIdWarehouseTo'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder setStockIdWarehouseTo(java.util.UUID value) {
      validate(fields()[2], value);
      this.stockIdWarehouseTo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stockIdWarehouseTo' field has been set.
      * @return True if the 'stockIdWarehouseTo' field has been set, false otherwise.
      */
    public boolean hasStockIdWarehouseTo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stockIdWarehouseTo' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder clearStockIdWarehouseTo() {
      stockIdWarehouseTo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityUpdatedToWarehouse' field.
      * @return The value.
      */
    public int getQuantityUpdatedToWarehouse() {
      return quantityUpdatedToWarehouse;
    }


    /**
      * Sets the value of the 'quantityUpdatedToWarehouse' field.
      * @param value The value of 'quantityUpdatedToWarehouse'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder setQuantityUpdatedToWarehouse(int value) {
      validate(fields()[3], value);
      this.quantityUpdatedToWarehouse = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityUpdatedToWarehouse' field has been set.
      * @return True if the 'quantityUpdatedToWarehouse' field has been set, false otherwise.
      */
    public boolean hasQuantityUpdatedToWarehouse() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantityUpdatedToWarehouse' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder clearQuantityUpdatedToWarehouse() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[4], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ecommerce.app.kafka.warehouse.avro.model.StockTransferredUpdateAvroModel.Builder clearUpdatedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTransferredUpdateAvroModel build() {
      try {
        StockTransferredUpdateAvroModel record = new StockTransferredUpdateAvroModel();
        record.stockIdWarehouseFrom = fieldSetFlags()[0] ? this.stockIdWarehouseFrom : (java.util.UUID) defaultValue(fields()[0]);
        record.quantityUpdatedFromWarehouse = fieldSetFlags()[1] ? this.quantityUpdatedFromWarehouse : (java.lang.Integer) defaultValue(fields()[1]);
        record.stockIdWarehouseTo = fieldSetFlags()[2] ? this.stockIdWarehouseTo : (java.util.UUID) defaultValue(fields()[2]);
        record.quantityUpdatedToWarehouse = fieldSetFlags()[3] ? this.quantityUpdatedToWarehouse : (java.lang.Integer) defaultValue(fields()[3]);
        record.updatedAt = fieldSetFlags()[4] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTransferredUpdateAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTransferredUpdateAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTransferredUpdateAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<StockTransferredUpdateAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










