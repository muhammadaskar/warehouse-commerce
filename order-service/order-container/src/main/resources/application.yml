server:
  port: 8484

logging:
  level:
    com.ecommerce.app: DEBUG
    org.springframework: INFO
    org.hibernate: INFO

order-service:
  secret-key: secret-key
  product-created-topic-name: product-created-topic
  payment-request-topic-name: payment-request-topic
  payment-proof-upload-request-topic-name: payment-proof-upload-request-topic
  payment-proof-upload-response-topic-name: payment-proof-upload-response-topic
  payment-approved-request-topic-name: payment-approved-request-topic
  order-paid-request-topic-name: order-paid-request-topic
  order-warehouse-response-topic-name: order-warehouse-response-topic
  order-processed-request-topic-name: order-processed-request-topic
  stock-transferred-update-topic-name: stock-transferred-update-topic
  order-shipped-request-topic-name: order-shipped-request-topic
  stock-shipped-update-topic-name: stock-shipped-update-topic
  order-confirmed-request-topic-name: order-confirmed-request-topic
  stock-updated-topic-name: stock-updated-topic
  stock-created-topic-name: stock-created-topic

spring:
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        ddl-auto: update
        dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      platform: postgres
      mode: always
      schema-locations: classpath:init-schema.sql

kafka-config:
  bootstrap-servers: localhost:19092,localhost:29092,localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  user-consumer-group-id: user-topic-consumer
  product-order-created-consumer-group-id: product-order-created-topic-consumer
  warehouse-consumer-group-id: warehouse-topic-consumer
  payment-consumer-group-id: payment-topic-consumer
  payment-approved-consumer-group-id: payment-approved-topic-consumer
  order-warehouse-response-consumer-group-id: order-warehouse-response-topic-consumer
  stock-transferred-consumer-group-id: stock-transferred-topic-consumer
  stock-shipped-update-consumer-group-id: stock-shipped-update-topic-consumer
  stock-updated-consumer-group-id: stock-updated-topic-consumer
  stock-created-consumer-group-id: stock-created-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150